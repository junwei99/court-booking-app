import { SQLQueryAST, SQLQueryIR, TSQueryAST } from '@pgtyped/parser';
import { TypeSource } from '@pgtyped/query';
import { ParsedConfig } from './config.js';
import { TypeAllocator } from './types.js';
export declare enum ProcessingMode {
    SQL = "sql-file",
    TS = "query-file"
}
export interface IField {
    optional?: boolean;
    fieldName: string;
    fieldType: string;
    comment?: string;
}
export declare function escapeComment(comment: string): string;
export declare const generateInterface: (interfaceName: string, fields: IField[]) => string;
export declare const generateTypeAlias: (typeName: string, alias: string) => string;
type ParsedQuery = {
    ast: TSQueryAST;
    mode: ProcessingMode.TS;
} | {
    ast: SQLQueryAST;
    mode: ProcessingMode.SQL;
};
export declare function queryToTypeDeclarations(parsedQuery: ParsedQuery, typeSource: TypeSource, types: TypeAllocator, config: ParsedConfig): Promise<string>;
type ITypedQuery = {
    mode: 'ts';
    fileName: string;
    query: {
        name: string;
        ast: TSQueryAST;
    };
    typeDeclaration: string;
} | {
    mode: 'sql';
    fileName: string;
    query: {
        name: string;
        ast: SQLQueryAST;
        ir: SQLQueryIR;
        paramTypeAlias: string;
        returnTypeAlias: string;
    };
    typeDeclaration: string;
};
export declare function generateDeclarationFile(contents: string, fileName: string, connection: any, mode: 'ts' | 'sql', config: ParsedConfig): Promise<{
    typeDecs: ITypedQuery[];
    declarationFileContents: string;
}>;
export {};
