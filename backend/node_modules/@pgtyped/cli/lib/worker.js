var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import nun from 'nunjucks';
import path from 'path';
import fs from 'fs-extra';
import { generateDeclarationFile } from './generator.js';
import { startup } from '@pgtyped/query';
import { AsyncQueue } from '@pgtyped/wire';
import worker from 'piscina';
let connected = false;
const connection = new AsyncQueue();
const config = worker.workerData;
export default function processFile({ fileName, transform, }) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!connected) {
            yield startup(config.db, connection);
            connected = true;
        }
        const ppath = path.parse(fileName);
        let decsFileName;
        if (transform.emitTemplate) {
            decsFileName = nun.renderString(transform.emitTemplate, ppath);
        }
        else {
            const suffix = transform.mode === 'ts' ? 'types.ts' : 'ts';
            decsFileName = path.resolve(ppath.dir, `${ppath.name}.${suffix}`);
        }
        // last part fixes https://github.com/adelsz/pgtyped/issues/390
        const contents = fs.readFileSync(fileName).toString().replace(/\r\n/g, '\n');
        const { declarationFileContents, typeDecs } = yield generateDeclarationFile(contents, fileName, connection, transform.mode, config);
        const relativePath = path.relative(process.cwd(), decsFileName);
        if (typeDecs.length > 0) {
            const oldDeclarationFileContents = (yield fs.pathExists(decsFileName))
                ? yield fs.readFile(decsFileName, { encoding: 'utf-8' })
                : null;
            if (oldDeclarationFileContents !== declarationFileContents) {
                yield fs.outputFile(decsFileName, declarationFileContents);
                return {
                    skipped: false,
                    typeDecsLength: typeDecs.length,
                    relativePath,
                };
            }
        }
        return {
            skipped: true,
            typeDecsLength: 0,
            relativePath,
        };
    });
}
//# sourceMappingURL=worker.js.map